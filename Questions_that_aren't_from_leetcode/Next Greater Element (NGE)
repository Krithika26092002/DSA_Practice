// Simple C++ program to print
// next greater elements in a
// given array
#include <iostream>
using namespace std;
 
/* prints element and NGE pair
for all elements of arr[] of size n */
void printNGE(int arr[], int n)
{
    int next, i, j;
    for (i = 0; i < n; i++) {
        next = -1;
        for (j = i + 1; j < n; j++) {
            if (arr[i] < arr[j]) {
                next = arr[j];
                break;
            }
        }
        cout << arr[i] << " --> " << next << endl;
    }
}
 
// Driver Code
int main()
{
    int arr[] = { 11, 13, 21, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printNGE(arr, n);
    return 0;
}
***********************************************************************************
Find NGE using stack
***********************************************************************************
// A Stack based C++ program to find next
// greater element for all array elements.
#include <bits/stdc++.h>
using namespace std;
 
/* prints element and NGE pair for all
elements of arr[] of size n */
void printNGE(int arr[], int n)
{
    stack<int> s;
 
    /* push the first element to stack */
    s.push(arr[0]);
 
    // iterate for rest of the elements
    for (int i = 1; i < n; i++) {
 
        if (s.empty()) {
            s.push(arr[i]);
            continue;
        }
 
        /* if stack is not empty, then
           pop an element from stack.
           If the popped element is smaller
           than next, then
        a) print the pair
        b) keep popping while elements are
        smaller and stack is not empty */
        while (s.empty() == false && s.top() < arr[i]) {
            cout << s.top() << " --> " << arr[i] << endl;
            s.pop();
        }
 
        /* push next to stack so that we can find
        next greater for it */
        s.push(arr[i]);
    }
 
    /* After iterating over the loop, the remaining
    elements in stack do not have the next greater
    element, so print -1 for them */
    while (s.empty() == false) {
        cout << s.top() << " --> " << -1 << endl;
        s.pop();
    }
}
 
/* Driver code */
int main()
{
    int arr[] = { 11, 13, 21, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printNGE(arr, n);
    return 0;
}
**************************************************************
Find NGE using MAP
**************************************************************

// C++ code to implement the approach
 
#include <bits/stdc++.h>
 
using namespace std;
 
void nextLargerElement(int arr[], int n)
{
    vector<unordered_map<string, int> > s;
 
    // iterating over the array
    for (int i = 0; i < n; i++) {
        while (s.size() > 0
               && s[s.size() - 1]["value"] < arr[i]) {
            // updating the array as per the stack top
            unordered_map<string, int> d = s[s.size() - 1];
            s.pop_back();
            arr[d["ind"]] = arr[i];
        }
        // pushing values to stack
        unordered_map<string, int> e;
 
        e["value"] = arr[i];
        e["ind"] = i;
        s.push_back(e);
    }
 
    // updating the array as per the stack top
    while (s.size() > 0) {
        unordered_map<string, int> d = s[s.size() - 1];
        s.pop_back();
        arr[d["ind"]] = -1;
    }
}
 
// Driver Code
 
int main()
{
    int arr[] = { 6, 8, 0, 1, 3 };
    int n = 5;
 
    // Function call
    nextLargerElement(arr, n);
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
}
****************************************************************
Next Greater Element in O(n) Time Complexity and O(1) Space Complexity
****************************************************************
#include <iostream>
#include <vector>
using namespace std;
 
class Solution {
public:
    vector<long long>
    nextLargerElement(vector<long long> arr, int n)
    {
        // Initialize a vector to store the next greater
        // elements.
        vector<long long> v(n, -1);
 
        // Initialize a variable to keep track of the
        // maximum element seen so far.
        long long mx = arr[n - 1];
 
        // Iterate over the array from right to left.
        for (int i = n - 2; i >= 0; i--) {
            // If the element to the right is greater than
            // the current element, then the next greater
            // element for the current element is the
            // element to the right.
            if (arr[i + 1] > arr[i]) {
                v[i] = arr[i + 1];
            }
            else {
                // If the next greater element for the
                // element to the right is greater than the
                // current element, then the next greater
                // element for the current element is the
                // next greater element for the element to
                // the right.
                if (v[i + 1] > arr[i]) {
                    v[i] = v[i + 1];
                }
                else if (mx > arr[i]) {
                    // If there is no next greater element
                    // to the right that is greater than the
                    // current element, then we need to find
                    // the next greater element that is
                    // greater than the current element and
                    // to its right. Initialize a variable
                    // to keep track of the index of the
                    // next greater element.
                    int k = i + 1;
                    // Iterate over the array from the
                    // current element to its right to find
                    // the next greater element.
                    while (arr[k] <= arr[i]) {
                        k++;
                    }
                    v[i] = arr[k];
                }
                else {
                    // If there is no next greater element
                    // to the right that is greater than the
                    // current element and there is no next
                    // greater element to the right that is
                    // greater than the next greater element
                    // for the current element, then there
                    // is no next greater element for the
                    // current element.
                    v[i] = -1;
                }
            }
            // Update the maximum element seen so far.
            mx = max(arr[i], mx);
        }
        // Return the vector containing the next greater
        // elements.
        return v;
    }
};
 
int main()
{
    // Input array
    vector<long long> arr = { 3, 8, 4, 1, 2, 6, 7, 2 };
    int n = arr.size();
    // Create an instance of the Solution class
    Solution sol;
    // Call the nextLargerElement function
    vector<long long> result
        = sol.nextLargerElement(arr, n);
    // Print the result
    cout << "For the input array [3, 8, 4, 1, 2, 6, 7, 2], "
            "the next greater elements are: ";
    for (int i = 0; i < n; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
    return 0;
}
