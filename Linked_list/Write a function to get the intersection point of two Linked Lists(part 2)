*********Continuation******************
Reverse the first list and make equations
****************************************
1) Let X be the length of the first linked list until intersection point.
   Let Y be the length of the second linked list until the intersection point.
   Let Z be the length of the linked list from the intersection point to End of
   the linked list including the intersection node.
   We Have
           X + Z = C1;
           Y + Z = C2;
2) Reverse first linked list.
3) Traverse Second linked list. Let C3 be the length of second list - 1. 
     Now we have
        X + Y = C3
     We have 3 linear equations. By solving them, we get
       X = (C1 + C3 – C2)/2;
       Y = (C2 + C3 – C1)/2;
       Z = (C1 + C2 – C3)/2;
      WE GOT THE INTERSECTION POINT.
4)  Reverse first linked list.
**********************************************************
Traverse both lists and compare addresses of last nodes
**********************************************************
1) Traverse the list 1, store the last node address
2) Traverse the list 2, store the last node address.
3) If nodes stored in 1 and 2 are same then they are intersecting.
**********************************************************
Use Hashing
**********************************************************
// C++ program to get intersection point of two linked list
#include <iostream>
#include <unordered_set>
using namespace std;
class Node
{
public:
	int data;
	Node* next;
	Node(int d)
	{
	data = d;
	next = NULL;
	}
};

// function to find the intersection point of two lists
void MegeNode(Node* n1, Node* n2)
{
	unordered_set<Node*> hs;
	while (n1 != NULL) {
		hs.insert(n1);
		n1 = n1->next;
	}
	while (n2) {
		if (hs.find(n2) != hs.end()) {
			cout << n2->data << endl;
			break;
		}
		n2 = n2->next;
	}
}

// function to print the list
void Print(Node* n)
{
	Node* curr = n;
	while(curr != NULL){
	cout << curr->data << " ";
	curr = curr->next;
	}
	cout << endl;
}

int main()
{
	// list 1
	Node* n1 = new Node(1);
	n1->next = new Node(2);
	n1->next->next = new Node(3);
	n1->next->next->next = new Node(4);
	n1->next->next->next->next = new Node(5);
	n1->next->next->next->next->next = new Node(6);
	n1->next->next->next->next->next->next = new Node(7);
	// list 2
	Node* n2 = new Node(10);
	n2->next = new Node(9);
	n2->next->next = new Node(8);
	n2->next->next->next = n1->next->next->next;
	Print(n1);
	Print(n2);
		
	MegeNode(n1,n2);
	
	return 0;
}
***************************************************
2-pointer technique
***************************************************
// CPP program to print intersection of lists
#include <bits/stdc++.h>
using namespace std;

/* Link list node */
class Node {
public:
	int data;
	Node* next;
};

// A utility function to return intersection node
Node* intersectPoint(Node* head1, Node* head2)
{
	// Maintaining two pointers ptr1 and ptr2
	// at the head of A and B,
	Node* ptr1 = head1;
	Node* ptr2 = head2;

	// If any one of head is NULL i.e
	// no Intersection Point
	if (ptr1 == NULL || ptr2 == NULL)
		return NULL;

	// Traverse through the lists until they
	// reach Intersection node
	while (ptr1 != ptr2) {

		ptr1 = ptr1->next;
		ptr2 = ptr2->next;

		// If at any node ptr1 meets ptr2, then it is
		// intersection node.Return intersection node.

		if (ptr1 == ptr2)
			return ptr1;
		/* Once both of them go through reassigning,
		they will be equidistant from the collision point.*/

		// When ptr1 reaches the end of a list, then
		// reassign it to the head2.
		if (ptr1 == NULL)
			ptr1 = head2;
		// When ptr2 reaches the end of a list, then
		// redirect it to the head1.
		if (ptr2 == NULL)
			ptr2 = head1;
	}
	return ptr1;
}

// Function to print intersection nodes
// in a given linked list
void print(Node* node)
{
	if (node == NULL)
		cout << "NULL";
	while (node->next != NULL) {
		cout << node->data << "->";
		node = node->next;
	}
	cout << node->data;
}
// Driver code
int main()
{
	/*
	Create two linked lists

	1st Linked list is 3->6->9->15->30
	2nd Linked list is 10->15->30

	15 30 are elements in the intersection list
	*/

	Node* newNode;
	Node* head1 = new Node();
	head1->data = 10;
	Node* head2 = new Node();
	head2->data = 3;
	newNode = new Node();
	newNode->data = 6;
	head2->next = newNode;
	newNode = new Node();
	newNode->data = 9;
	head2->next->next = newNode;
	newNode = new Node();
	newNode->data = 15;
	head1->next = newNode;
	head2->next->next->next = newNode;
	newNode = new Node();
	newNode->data = 30;
	head1->next->next = newNode;
	head1->next->next->next = NULL;
	Node* intersect_node = NULL;

	// Find the intersection node of two linked lists
	intersect_node = intersectPoint(head1, head2);
	cout << "INTERSEPOINT LIST :";
	print(intersect_node);
	return 0;
}

******************************************************
Using the 2-stack approach
******************************************************
// C++ program to print intersection of lists

#include <bits/stdc++.h>
using namespace std;

/* Link list node */
struct Node {
	int data;
	Node* next;
};

// A utility function to return intersection node
Node* intersectPoint(Node* headA, Node* headB)
{
	stack<Node*> stackA;
	stack<Node*> stackB;
	Node* intersectNode = NULL;

	while (headB != NULL) {
		stackB.push(headB);
		headB = headB->next;
	}

	while (headA != NULL) {
		stackA.push(headA);
		headA = headA->next;
	}

	if (!stackA.top()->data == stackB.top()->data) {
		return NULL;
	}

	while (!stackA.empty() && !stackB.empty()
		&& stackA.top()->data == stackB.top()->data) {
		intersectNode = stackA.top();
		stackA.pop();
		stackB.pop();
	}

	return intersectNode;
}

// Driver code
int main()
{
	/*
	Create two linked lists

	1st Linked list is 3.6.9.15.30
	2nd Linked list is 10.15.30

	15 30 are elements in the intersection list
	*/

	Node* newNode;
	Node* head1 = new Node();
	head1->data = 10;
	Node* head2 = new Node();
	head2->data = 3;
	newNode = new Node();
	newNode->data = 6;
	head2->next = newNode;
	newNode = new Node();
	newNode->data = 9;
	head2->next->next = newNode;
	newNode = new Node();
	newNode->data = 15;
	head1->next = newNode;
	head2->next->next->next = newNode;
	newNode = new Node();
	newNode->data = 30;
	head1->next->next = newNode;
	head1->next->next->next = NULL;
	Node* intersect_node = NULL;

	// Find the intersection node of two linked lists
	intersect_node = intersectPoint(head1, head2);

	cout << "INTERSECTION POINT: " << intersect_node->data;
}
