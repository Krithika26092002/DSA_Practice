class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> mp;
        int count;
        int ans = 0;
        for(int i=0;i<s.length(); ++i){
            mp[s[i]]++;
            count++;
            if(mp[s[i]]<=1 && count > ans){
            ans = max(count, ans);
            }
            else if (mp[s[i]] > 1){
                count = 1;
            }
        }
        return ans;
    }
};
************* My code, didn't pass one dvdf part *********************
************* The right code *****************
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        int maxLength = 0;
        unordered_set<char> charSet;
        int left = 0;
        
        for (int right = 0; right < n; right++) {
            if (charSet.count(s[right]) == 0) {
                charSet.insert(s[right]);
                maxLength = max(maxLength, right - left + 1);
            } else {
                while (charSet.count(s[right])) {
                    charSet.erase(s[left]);
                    left++;
                }
                charSet.insert(s[right]);
            }
        }
        
        return maxLength;
    }
};
