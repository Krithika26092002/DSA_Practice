********************************************************************************************************************
Let's go through the serialization process for the given trees root = [3,4,5,1,2] and subRoot = [4,1,2].

For the root tree:

The root node has a value of 3, and we start the serialization process from here.
The left subtree of the root is [4,5], and the right subtree is [1,2].
Serializing the left subtree [4,5]:
The root node of the left subtree is 4, so we add "#4" to the serialization string.
The left subtree of 4 is null, so we add "null" to the serialization string.
The right subtree of 4 is null, so we add "null" to the serialization string.
Serializing the right subtree [1,2]:
The root node of the right subtree is 1, so we add "#1" to the serialization string.
The left subtree of 1 is null, so we add "null" to the serialization string.
The right subtree of 1 is 2, so we add "#2" to the serialization string.
The left subtree of 2 is null, so we add "null" to the serialization string.
The right subtree of 2 is null, so we add "null" to the serialization string.
Putting it all together, the serialized string representation of the root tree is "#3 #4 null null #1 null #2 null null".

For the subRoot tree:

The root node has a value of 4, and we start the serialization process from here.
The left subtree of the root is 1, and the right subtree is 2.
Serializing the left subtree 1:
The root node of the left subtree is 1, so we add "#1" to the serialization string.
The left subtree of 1 is null, so we add "null" to the serialization string.
The right subtree of 1 is null, so we add "null" to the serialization string.
Serializing the right subtree 2:
The root node of the right subtree is 2, so we add "#2" to the serialization string.
The left subtree of 2 is null, so we add "null" to the serialization string.
The right subtree of 2 is null, so we add "null" to the serialization string.
Putting it all together, the serialized string representation of the subRoot tree is "#4 #1 null null #2 null null".
**********************************************************************************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        string rootStr = serialize(root);
        string subRootStr = serialize(subRoot);
        
        return rootStr.find(subRootStr) != string::npos;
    }
    
    string serialize(TreeNode* node) {
        if (!node)
            return "null";
        
        return "#" + to_string(node->val) + " " + serialize(node->left) + " " + serialize(node->right);
    }
};
