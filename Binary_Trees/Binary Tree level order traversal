/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL)return ans;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int s=q.size();
            vector<int>v;
            for(int i=0;i<s;i++){
                TreeNode *node=q.front();
                q.pop();
                if(node->left!=NULL)q.push(node->left);
                if(node->right!=NULL)q.push(node->right);
                v.push_back(node->val);
            }
            ans.push_back(v);
        }
        return ans;
    }
};
***********************************************************************
Initialize an empty 2D vector ans to store the level order traversal result.

Check if the root of the binary tree is NULL. If it is, return the empty ans.

Create a queue q to perform a breadth-first search (BFS) traversal of the tree. Push the root node into the queue.

Start a while loop that continues until the queue is empty:

Get the size of the current level by storing the size of the queue in the variable s.
Create an empty vector v to store the values of nodes at the current level.
Iterate i from 0 to s - 1 to process each node at the current level:

Remove the front node from the queue using q.front() and store it in the variable node.
Pop the front node from the queue using q.pop().
Check if the left child of node is not NULL. If it's not NULL, push it into the queue q.
Check if the right child of node is not NULL. If it's not NULL, push it into the queue q.
Add the value of node to the vector v using v.push_back(node->val).
After processing all the nodes at the current level, add the vector v to the ans vector.

Continue the while loop until all levels of the tree have been processed.

Return the ans vector containing the level order traversal of the binary tree.
