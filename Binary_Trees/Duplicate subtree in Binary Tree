struct Node
{
  char data;
  struct Node* left;
  struct Node* right;
};*/

/*The structure of the Binary Tree Node  is
struct Node
{
  char data;
  struct Node* left;
  struct Node* right;
};*/

class Solution {
  public:
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    string solve(Node *root, unordered_map<string, int> &m)
    {
        // Base case
        if(root == NULL)
            return "#";
        if(root->left == NULL && root->right == NULL)
            return to_string(root->data) + ".";
        
        string ans = to_string(root->data) + ".";
        ans = ans + solve(root->left, m) + solve(root->right, m);
        m[ans]++;
        return ans;
    }
    int dupSub(Node *root) {
        unordered_map<string, int> m;
        solve(root, m);
        
        for(auto i : m)
        {
            if(i.second >= 2)
                return 1;
        }
        return 0;
    }
};
