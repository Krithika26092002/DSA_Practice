struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

class Solution
{
    public:
    //Function to return the lowest common ancestor in a Binary Tree.
    Node* lca(Node* root ,int n1 ,int n2 )
    {
       //Your code here 
       if(root==NULL || root->data==n1 || root->data==n2){
           return root;
       }
       Node* left=lca(root->left,n1,n2);
       Node* right= lca(root->right,n1,n2);
       if(left && right){
           return root;
       }
       return left==NULL?right:left;
    }
};

************************** Another way to solve *******************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root){
            return NULL;
        }
        if(root==p || root==q)return root;
        TreeNode* l,*r;
        l = lowestCommonAncestor(root->left,p,q);
        r= lowestCommonAncestor(root->right,p,q);
        if(l && r)return root;
        if(l)return l;
        if(r) return r;
        return NULL;
    }
};
