// A C++ program for Prim's Minimum
// Spanning Tree (MST) algorithm. The program is
// for adjacency matrix representation of the graph

#include <bits/stdc++.h>
using namespace std;

// Number of vertices in the graph
#define V 5

// A utility function to find the vertex with
// minimum key value, from the set of vertices
// not yet included in MST
int minKey(int key[], bool mstSet[])
{
	// Initialize min value
	int min = INT_MAX, min_index;

	for (int v = 0; v < V; v++)
		if (mstSet[v] == false && key[v] < min)
			min = key[v], min_index = v;

	return min_index;
}

// A utility function to print the
// constructed MST stored in parent[]
void printMST(int parent[], int graph[V][V])
{
	cout << "Edge \tWeight\n";
	for (int i = 1; i < V; i++)
		cout << parent[i] << " - " << i << " \t"
			<< graph[i][parent[i]] << " \n";
}

// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation
void primMST(int graph[V][V])
{
	// Array to store constructed MST
	int parent[V];

	// Key values used to pick minimum weight edge in cut
	int key[V];

	// To represent set of vertices included in MST
	bool mstSet[V];

	// Initialize all keys as INFINITE
	for (int i = 0; i < V; i++)
		key[i] = INT_MAX, mstSet[i] = false;

	// Always include first 1st vertex in MST.
	// Make key 0 so that this vertex is picked as first
	// vertex.
	key[0] = 0;

	// First node is always root of MST
	parent[0] = -1;

	// The MST will have V vertices
	for (int count = 0; count < V - 1; count++) {
		
		// Pick the minimum key vertex from the
		// set of vertices not yet included in MST
		int u = minKey(key, mstSet);

		// Add the picked vertex to the MST Set
		mstSet[u] = true;

		// Update key value and parent index of
		// the adjacent vertices of the picked vertex.
		// Consider only those vertices which are not
		// yet included in MST
		for (int v = 0; v < V; v++)

			// graph[u][v] is non zero only for adjacent
			// vertices of m mstSet[v] is false for vertices
			// not yet included in MST Update the key only
			// if graph[u][v] is smaller than key[v]
			if (graph[u][v] && mstSet[v] == false
				&& graph[u][v] < key[v])
				parent[v] = u, key[v] = graph[u][v];
	}

	// Print the constructed MST
	printMST(parent, graph);
}

// Driver's code
int main()
{
	int graph[V][V] = { { 0, 2, 0, 6, 0 },
						{ 2, 0, 3, 8, 5 },
						{ 0, 3, 0, 0, 7 },
						{ 6, 8, 0, 0, 9 },
						{ 0, 5, 7, 9, 0 } };

	// Print the solution
	primMST(graph);

	return 0;
}

***********************************************************************************
OPTIMIZED APPROACH OF PRIMâ€™S ALGORITHM: 
Intuition

We transform the adjacency matrix into adjacency list using ArrayList<ArrayList<Integer>>.
Then we create a Pair class to store the vertex and its weight .
We sort the list on the basis of lowest weight.
We create priority queue and push the first vertex and its weight in the queue
Then we just traverse through its edges and store the least weight in a variable called ans.
At last after all the vertex we return the ans.
***********************************************************************************
#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> pii;

// Function to find sum of weights of edges of the Minimum Spanning Tree.
int spanningTree(int V, int E, int edges[][3])
{
	// Create an adjacency list representation of the graph
	vector<vector<int>> adj[V];
	
	// Fill the adjacency list with edges and their weights
	for (int i = 0; i < E; i++) {
		int u = edges[i][0];
		int v = edges[i][1];
		int wt = edges[i][2];
		adj[u].push_back({v, wt});
		adj[v].push_back({u, wt});
	}
	
	// Create a priority queue to store edges with their weights
	priority_queue<pii, vector<pii>, greater<pii>> pq;
	
	// Create a visited array to keep track of visited vertices
	vector<bool> visited(V, false);
	
	// Variable to store the result (sum of edge weights)
	int res = 0;
	
	// Start with vertex 0
	pq.push({0, 0});
	
	// Perform Prim's algorithm to find the Minimum Spanning Tree
	while(!pq.empty()){
		auto p = pq.top();
		pq.pop();
		
		int wt = p.first; // Weight of the edge
		int u = p.second; // Vertex connected to the edge
		
		if(visited[u] == true){
			continue; // Skip if the vertex is already visited
		}
		
		res += wt; // Add the edge weight to the result
		visited[u] = true; // Mark the vertex as visited
		
		// Explore the adjacent vertices
		for(auto v : adj[u]){
			// v[0] represents the vertex and v[1] represents the edge weight
			if(visited[v[0]] == false){
				pq.push({v[1], v[0]}); // Add the adjacent edge to the priority queue
			}
		}
	}
	
	return res; // Return the sum of edge weights of the Minimum Spanning Tree
}

int main()
{
	int graph[][3] = {{0, 1, 5},
					{1, 2, 3},
					{0, 2, 1}};

	// Function call
	cout << spanningTree(3, 3, graph) << endl;

	return 0;
}
