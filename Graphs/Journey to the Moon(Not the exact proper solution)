class Solution {
public:
    // Function to perform DFS to find connected components.
    void dfs(int u, vector<vector<int>>& graph, vector<bool>& visited, int& componentSize) {
        visited[u] = true;
        componentSize++;
        
        for (int v : graph[u]) {
            if (!visited[v]) {
                dfs(v, graph, visited, componentSize);
            }
        }
    }

    int journeyToMoon(int n, vector<vector<int>>& astronaut) {
        // Create an adjacency list representation of the graph.
        vector<vector<int>> graph(n);
        for (const auto& pair : astronaut) {
            graph[pair[0]].push_back(pair[1]);
            graph[pair[1]].push_back(pair[0]);
        }
        
        vector<bool> visited(n, false);
        vector<int> componentSizes;

        // Perform DFS to find the size of each connected component.
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int componentSize = 0;
                dfs(i, graph, visited, componentSize);
                componentSizes.push_back(componentSize);
            }
        }

        // Calculate the total number of ways to form pairs.
        long long totalPairs = 0;
        long long totalAstronauts = n;
        for (int size : componentSizes) {
            totalPairs += (totalAstronauts - size) * size;
            totalAstronauts -= size;
        }
        
        return totalPairs;
    }
};
