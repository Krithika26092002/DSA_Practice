#Dynamic Programming approach
class Solution:
    def canJump(self, nums):
        n=len(nums)
        dp=[False for _ in range(n-1)]
        dp+=[True]
        for i in range(n-2,-1,-1):
            for j in range(i,min(n,i+nums[i]+1)):
                if dp[j]:
                    dp[i]=True
                    break
                #print(i,j,dp)
        return dp[0]

#1-6 lines, O(n) time, O(1) space
##Going forwards. m tells the maximum index we can reach so far.
def canJump(self, nums):
    m = 0
    for i, n in enumerate(nums):
        if i > m:
            return False
        m = max(m, i+n)
    return True

##One-liner version:
def canJump(self, nums):
    return reduce(lambda m, (i, n): max(m, i+n) * (i <= m), enumerate(nums, 1), 1) > 0

##Going backwards, most people seem to do that, here's my version.
def canJump(self, nums):
    goal = len(nums) - 1
    for i in range(len(nums))[::-1]:
        if i + nums[i] >= goal:
            goal = i
    return not goal
